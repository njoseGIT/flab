# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'QT5Console.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QThread
import sys
import time

#messaging needs to be fixed

class Ui_MainWindow(object):

    is_running = False

    def __init__(self, flab, ui_queue, flab_queue):
        self.flab = flab
        self.ui_queue = ui_queue
        self.flab_queue = flab_queue
        self.is_running = True
        super().__init__()

    def setupUi(self, CustomMainWindow):
        CustomMainWindow.setObjectName("MainWindow")
        CustomMainWindow.resize(500, 425)
        self.centralwidget = QtWidgets.QWidget(CustomMainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(10, 10, 490, 300))
        self.textBrowser.setObjectName("textBrowser")
        self.lineEdit = LineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(10, 320, 490, 30))
        self.lineEdit.setObjectName("lineEdit")
       
        CustomMainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(CustomMainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 24))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        CustomMainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(CustomMainWindow)
        self.statusbar.setObjectName("statusbar")
        CustomMainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(CustomMainWindow)
        QtCore.QMetaObject.connectSlotsByName(CustomMainWindow)

        self.lineEdit.returnPressed.connect(self.onReturn)

        self.textBrowser.readOnly = True

        self.commandHistory = []

    def retranslateUi(self, CustomMainWindow):
        _translate = QtCore.QCoreApplication.translate
        CustomMainWindow.setWindowTitle("Flab Console")
        self.lineEdit.setText(_translate("MainWindow", ""))
        self.menuFile.setTitle(_translate("MainWindow", "File"))

    def onReturn(self):
        command = self.lineEdit.text()
        self.textBrowser.append('>'+command)
        self.lineEdit.setText('')
        if not command == '':
            self.lineEdit.commandHistory.insert(1,command)
        self.lineEdit.commandHistoryPosition = 0
        if command == 'exit':
            self.flab.close_flab()
        elif command[0:7] == 'python ':
            try:
                eval(command[7:])
            except Exception as e:
                self.textBrowser.append('error in python command')
                self.textBrowser.append(str(e))
        else:
            try:
                self.flab_queue.put(command)
            except Exception as e:
                self.textBrowser.append('error in flab command')
                self.textBrowser.append(str(e))
        time.sleep(0.1)
        self.textBrowser.moveCursor(QtGui.QTextCursor.End)
        self.textBrowser.ensureCursorVisible()

    def run(self):
        app = QtWidgets.QApplication(sys.argv)
        self.MainWindow = CustomMainWindow(self.flab)
        try:
            self.setupUi(self.MainWindow)
        except Exception as e:
            print(e)

        self.qthread = QueueThread(self.ui_queue, self, self.flab)
        self.qthread.finished.connect(app.exit)
        self.is_running = True
        self.qthread.start()

        self.flab.load_all_tasks()
        #self.flab.load_all_guis()
        self.MainWindow.show()
        app.exec_()

    def print(self,s):
        self.textBrowser.append(str(s))
        time.sleep(0.1)
        self.textBrowser.moveCursor(QtGui.QTextCursor.End)
        self.textBrowser.ensureCursorVisible()

class CustomMainWindow(QtWidgets.QMainWindow):

    def __init__(self, flab):
        super().__init__()
        self.flab = flab

    def closeEvent(self,event):
        event.ignore()
        result = QtWidgets.QMessageBox.question(self,"Confirm Exit...","Are you sure you want to exit ?",QtWidgets.QMessageBox.Yes| QtWidgets.QMessageBox.No)
        if result == QtWidgets.QMessageBox.Yes:
            event.accept()
            self.flab.close_flab()
            self.is_running = False

class LineEdit(QtWidgets.QLineEdit):

    def __init__(self, obj):
        super().__init__(obj)
        self.commandHistory = ['']
        self.commandHistoryPosition = 0

    def keyPressEvent(self,event):
        #key up
        if event.key() == 16777235:
            if len(self.commandHistory) >= 1:
                if self.commandHistoryPosition < len(self.commandHistory)-1:
                    self.commandHistoryPosition = self.commandHistoryPosition+1
                    self.setText(self.commandHistory[self.commandHistoryPosition])
        elif event.key() == 16777237:
            if len(self.commandHistory) >= 1:
                if self.commandHistoryPosition <= len(self.commandHistory)-1 and self.commandHistoryPosition >= 1:
                    self.commandHistoryPosition = self.commandHistoryPosition-1
                    self.setText(self.commandHistory[self.commandHistoryPosition])
        else:
            super().keyPressEvent(event)

class QueueThread(QThread):

    def __init__(self, ui_queue, ui_window, flab):
        self.ui_queue = ui_queue
        self.ui_window = ui_window
        self.flab = flab
        super().__init__()

    def run(self):
        while self.ui_window.is_running and self.flab.is_running:
            try:
                s = self.ui_queue.get(block=True)
                if s == 'close':
                    self.flab.is_running = False
                else:
                    self.ui_window.print(s)
            except Exception as e:
                self.ui_window.print(e)



